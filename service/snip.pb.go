// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snip.proto

package snip

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnipRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnipRequest) Reset()         { *m = SnipRequest{} }
func (m *SnipRequest) String() string { return proto.CompactTextString(m) }
func (*SnipRequest) ProtoMessage()    {}
func (*SnipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4abda13f8757c01b, []int{0}
}

func (m *SnipRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnipRequest.Unmarshal(m, b)
}
func (m *SnipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnipRequest.Marshal(b, m, deterministic)
}
func (m *SnipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnipRequest.Merge(m, src)
}
func (m *SnipRequest) XXX_Size() int {
	return xxx_messageInfo_SnipRequest.Size(m)
}
func (m *SnipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnipRequest proto.InternalMessageInfo

func (m *SnipRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type SnipResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnipResponse) Reset()         { *m = SnipResponse{} }
func (m *SnipResponse) String() string { return proto.CompactTextString(m) }
func (*SnipResponse) ProtoMessage()    {}
func (*SnipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4abda13f8757c01b, []int{1}
}

func (m *SnipResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnipResponse.Unmarshal(m, b)
}
func (m *SnipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnipResponse.Marshal(b, m, deterministic)
}
func (m *SnipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnipResponse.Merge(m, src)
}
func (m *SnipResponse) XXX_Size() int {
	return xxx_messageInfo_SnipResponse.Size(m)
}
func (m *SnipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnipResponse proto.InternalMessageInfo

func (m *SnipResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*SnipRequest)(nil), "snip.SnipRequest")
	proto.RegisterType((*SnipResponse)(nil), "snip.SnipResponse")
}

func init() { proto.RegisterFile("snip.proto", fileDescriptor_4abda13f8757c01b) }

var fileDescriptor_4abda13f8757c01b = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xcb, 0x2c,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xe4, 0xb9, 0xb8, 0x83, 0xf3,
	0x32, 0x0b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x05, 0x2e, 0x1e, 0x88, 0x82, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x4c, 0x15, 0x46, 0x2e, 0x5c, 0x7c, 0xa1, 0x45, 0x39, 0x20, 0x45,
	0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x46, 0x5c, 0xec, 0x20, 0xc3, 0xe3, 0x33, 0x4b,
	0x84, 0x04, 0xf5, 0xc0, 0x56, 0x22, 0xd9, 0x21, 0x25, 0x84, 0x2c, 0x04, 0x31, 0x55, 0x89, 0x21,
	0x89, 0x0d, 0xec, 0x2a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xdd, 0xb0, 0xf2, 0xa3,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UrlSnipServiceClient is the client API for UrlSnipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UrlSnipServiceClient interface {
	SnipIt(ctx context.Context, in *SnipRequest, opts ...grpc.CallOption) (*SnipResponse, error)
}

type urlSnipServiceClient struct {
	cc *grpc.ClientConn
}

func NewUrlSnipServiceClient(cc *grpc.ClientConn) UrlSnipServiceClient {
	return &urlSnipServiceClient{cc}
}

func (c *urlSnipServiceClient) SnipIt(ctx context.Context, in *SnipRequest, opts ...grpc.CallOption) (*SnipResponse, error) {
	out := new(SnipResponse)
	err := c.cc.Invoke(ctx, "/snip.UrlSnipService/snip_it", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlSnipServiceServer is the server API for UrlSnipService service.
type UrlSnipServiceServer interface {
	SnipIt(context.Context, *SnipRequest) (*SnipResponse, error)
}

func RegisterUrlSnipServiceServer(s *grpc.Server, srv UrlSnipServiceServer) {
	s.RegisterService(&_UrlSnipService_serviceDesc, srv)
}

func _UrlSnipService_SnipIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlSnipServiceServer).SnipIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snip.UrlSnipService/SnipIt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlSnipServiceServer).SnipIt(ctx, req.(*SnipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UrlSnipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snip.UrlSnipService",
	HandlerType: (*UrlSnipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "snip_it",
			Handler:    _UrlSnipService_SnipIt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snip.proto",
}
